// Nesse exerc√≠cio, voc√™ est√° livre para escolher os nomes para suas vari√°veis e fun√ß√µes! üòÑ

// Crie uma fun√ß√£o que receba dois argumentos e retorne a soma dos mesmos.

function soma (x, y){ return x + y };

// Declare uma vari√°vel que receba a invoca√ß√£o da fun√ß√£o criada acima, passando dois n√∫meros quaisquer por argumento, e somando 5 ao resultado retornado da fun√ß√£o.

var animal = soma(2, 3) + 5;

// Qual o valor atualizado dessa vari√°vel?

animal = 10;

// Declare uma nova vari√°vel, sem valor.

var center;

/* Crie uma fun√ß√£o que adicione um valor √† vari√°vel criada acima, e retorne a string: O valor da vari√°vel agora √© VALOR. Onde VALOR √© o novo valor da vari√°vel. */

function hold (x, y){
    var center = x + y;
    return "O valor da vari√°vel agora √© " + center;
}

// Invoque a fun√ß√£o criada acima.

hold();

// Qual o retorno da fun√ß√£o? (Use coment√°rios de bloco).

/* Crie uma fun√ß√£o com as seguintes caracter√≠sticas:

A fun√ß√£o deve receber 3 argumentos;
Se qualquer um dos tr√™s argumentos n√£o estiverem preenchidos, a fun√ß√£o deve retornar a string: Preencha todos os valores corretamente!
O retorno da fun√ß√£o deve ser a multiplica√ß√£o dos 3 argumentos, somando 2 ao resultado da multiplica√ß√£o. */

function restless (x, y, z){
    if ( x === ' ' || y === ' ' || z === ' '){
        return "Preencha todos os valores corretamente";
    } else {
        return (x * y * z) + 2
    }
}

// Invoque a fun√ß√£o criada acima, passando s√≥ dois n√∫meros como argumento.

restless(1, 2);

// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).

NaN

// Agora invoque novamente a fun√ß√£o criada acima, mas passando todos os tr√™s argumentos necess√°rios.

restless(1, 2, 2);

// Qual o resultado da invoca√ß√£o acima? (Use coment√°rios para mostrar o valor retornado).

6

/* Crie uma fun√ß√£o com as seguintes caracter√≠sticas:

A fun√ß√£o deve receber 3 argumentos.
Se somente um argumento for passado, retorne o valor do argumento.
Se dois argumentos forem passados, retorne a soma dos dois argumentos.
Se todos os argumentos forem passados, retorne a soma do primeiro com o segundo, e o resultado, dividido pelo terceiro.
Se nenhum argumento for passado, retorne o valor booleano false.
E ainda, se nenhuma das condi√ß√µes acima forem atendidas, retorne null. */
function price (x, y, z){
    if(x != ' ' && y == ' ' && z == ' '){
        return x;
    } else if(x != ' ' && y != ' ' && z == ' ' ) {
        return x + y;
    } else if(x != ' ' && y != ' ' && z != ' ' ){
        return (x + y)/z;
    } else if (x == ' ' && y == ' ' && z == ' ' ){
        return false;
    } else{
        return null;
    }
}

// Invoque a fun√ß√£o acima utilizando todas as possibilidades (com nenhum argumento, com um, com dois e com tr√™s.) Coloque um coment√°rio de linha ao lado da fun√ß√£o com o resultado de cada invoca√ß√£o.

price(0, 0, 0) - false

price(1, 0, 0) - 1

price(1, 2, 0) - 3

price(1, 1, 1) - 2

price(1, 0, 1) - null

